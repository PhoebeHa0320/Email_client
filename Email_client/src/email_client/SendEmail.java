package email_client;

import email_client.dialogMess.ExplainBcc;
import email_client.dialogMess.ExplainCC;
import email_client.dialogMess.SendMesseage;
import email_client.function.GeneralAction;
import email_client.global.IconImageUtilities;
import email_client.global.LookandFeel;
import email_client.global.RegexEmail;
import email_client.sqlitehelper.sqlitehelper;
import java.awt.Dialog;
import java.io.File;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.MessagingException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

public class SendEmail extends javax.swing.JFrame {
    //<editor-fold defaultstate="collapsed" desc="Global Function">
    SendMesseage sendMesseage = new SendMesseage(this, true);
    GeneralAction gAction = new GeneralAction();
    Connection connection = sqlitehelper.getConnection();
    PreparedStatement ps;
    ResultSet rs;
    String fromUser, toUser, cc, bcc, subject, content, filepath;
    //</editor-fold>
    //toUser: gửi tới địa chỉ email
    //subject: tiêu đề thư
    //content: nội dung thư

    /**
     * Creates new form NewJFrame
     */
    public SendEmail() {       
        initComponents();
        //icon mặc định của phần mềm
        IconImageUtilities.setIconImage(this);
        mailField.setContentType("text/html");
    }
    
    private void EnableFunction() {
        sendBtn.setEnabled(true);
        toField.setEnabled(true);
        ccField.setEnabled(true);
        BccField.setEnabled(true);
        subjectField.setEnabled(true);
        attachmentBtn.setEnabled(true);
    }
    
    private void DisableFunction() {
        sendBtn.setEnabled(false);
        toField.setEnabled(false);
        ccField.setEnabled(false);
        BccField.setEnabled(false);
        subjectField.setEnabled(false);
        attachmentBtn.setEnabled(false);
    }
    
    public void clearInput() {
        toField.setText("");
        ccField.setText("");
        BccField.setText("");
        subjectField.setText("");
        mailField.setText("");
    }
     
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sendBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        hintCC = new javax.swing.JButton();
        ccField = new javax.swing.JTextField();
        hintBcc = new javax.swing.JButton();
        BccField = new javax.swing.JTextField();
        subjectField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        attachmentBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        toField = new javax.swing.JTextField();
        emailFrom = new javax.swing.JLabel();
        pathAttachment = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        mailField = new javax.swing.JEditorPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Soạn thư");

        sendBtn.setFont(new java.awt.Font("SF Pro Display", 0, 16)); // NOI18N
        sendBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/icons8-email-send-48.png"))); // NOI18N
        sendBtn.setText("Gửi");
        sendBtn.setBorderPainted(false);
        sendBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        sendBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        sendBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendBtnActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("SF Pro Display", 0, 16)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Từ");

        hintCC.setFont(new java.awt.Font("SF Pro Display", 0, 16)); // NOI18N
        hintCC.setText("CC");
        hintCC.setBorderPainted(false);
        hintCC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hintCCActionPerformed(evt);
            }
        });

        ccField.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N

        hintBcc.setFont(new java.awt.Font("SF Pro Display", 0, 16)); // NOI18N
        hintBcc.setText("Bcc");
        hintBcc.setBorderPainted(false);
        hintBcc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hintBccActionPerformed(evt);
            }
        });

        BccField.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N

        subjectField.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N

        jLabel2.setFont(new java.awt.Font("SF Pro Display", 0, 16)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Chủ đề");

        attachmentBtn.setFont(new java.awt.Font("SF Pro Display", 0, 16)); // NOI18N
        attachmentBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/icons8-attachment-32.png"))); // NOI18N
        attachmentBtn.setText("Đính kèm");
        attachmentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attachmentBtnActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("SF Pro Display", 0, 16)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Tập tin");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(106, 106, 106)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(attachmentBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(34, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(attachmentBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 10, Short.MAX_VALUE))
        );

        jLabel4.setFont(new java.awt.Font("SF Pro Display", 0, 16)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Tới");

        toField.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N

        emailFrom.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        emailFrom.setText("Tài khoản");

        pathAttachment.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N

        mailField.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        jScrollPane2.setViewportView(mailField);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(pathAttachment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(sendBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(hintCC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(hintBcc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ccField)
                                    .addComponent(BccField, javax.swing.GroupLayout.DEFAULT_SIZE, 783, Short.MAX_VALUE)
                                    .addComponent(subjectField, javax.swing.GroupLayout.DEFAULT_SIZE, 783, Short.MAX_VALUE)
                                    .addComponent(toField)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(emailFrom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(15, 15, 15))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(emailFrom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(toField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(hintCC)
                            .addComponent(ccField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(hintBcc)
                            .addComponent(BccField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(subjectField)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(sendBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pathAttachment, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 523, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void attachmentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attachmentBtnActionPerformed
        // TODO add your handling code here:
        Thread chooseAttachment = new Thread() {
            @Override
            public void run() {
                JFileChooser chooser = new JFileChooser();                                                   
                chooser.setCurrentDirectory(new File(System.getProperty("user.home")));              
                chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);               
                if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) 
                {                 
                    File targetFileName = chooser.getSelectedFile(); 
                    //Print location saved file
                    pathAttachment.setText(targetFileName.getAbsolutePath());                           
                }
            }
        };
        chooseAttachment.start();      
    }//GEN-LAST:event_attachmentBtnActionPerformed

    private void hintCCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hintCCActionPerformed
        // TODO add your handling code here:
        ExplainCC.NotifyMesseage();
    }//GEN-LAST:event_hintCCActionPerformed

    private void hintBccActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hintBccActionPerformed
        // TODO add your handling code here:
        ExplainBcc.NotifyMesseage();
    }//GEN-LAST:event_hintBccActionPerformed

    private void sendBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendBtnActionPerformed
        // TODO add your handling code here:
        fromUser = emailFrom.getText();
        toUser = toField.getText(); //người nhận
        cc = ccField.getText(); //có thể bỏ qua
        bcc = BccField.getText(); //có thể bỏ qua
        subject = subjectField.getText(); //tiêu đề thư, hãy tôn trọng người nhận thư, đừng bỏ trống phần này
        content = mailField.getText(); //nội dung thư
        filepath = pathAttachment.getText(); //file đính kèm
        if (checkInput(toUser) == true) {
            String getTitle = this.getTitle();
            SendEmail(fromUser, toUser, cc, bcc, subject, content, filepath, 
                    getTitle);                  
        }      
              
    }//GEN-LAST:event_sendBtnActionPerformed

    private void SendEmail(String fromUser, String toUser, String cc, String bcc, String subject, 
            String content, String filepath, String getTitle) 
    {
        sendMesseage.setModalityType(Dialog.ModalityType.MODELESS);
        sendMesseage.setVisible(true);
        DisableFunction();
        Thread startSend = new Thread() {
                @Override
                public void run() {
                    try {
                        ps = connection.prepareStatement("SELECT * FROM email WHERE email = ?");
                        ps.setString(1, fromUser);
                        rs = ps.executeQuery();
                        while (rs.next()) {
                            switch (getTitle) 
                            {
                                case "Soạn thư" -> {gAction.SendAction(fromUser, rs.getString("password"), 
                                    rs.getString("smtp"), rs.getString("portSSL"),
                                    toUser, subject, cc, bcc, filepath, content);
                                }
                                case "Chuyển tiếp thư" -> {gAction.FowardAction(fromUser, rs.getString("password"), 
                                    rs.getString("smtp"), rs.getString("portSSL"),
                                    toUser, subject, cc, bcc, filepath, content);
                                }
                                case "Trả lời thư" -> {gAction.ReplyAction(fromUser, rs.getString("password"), 
                                    rs.getString("smtp"), rs.getString("portSSL"),
                                    toUser, subject, cc, bcc, filepath, content);                                   
                                }
                            }
                            EnableFunction();
                            sendMesseage.setVisible(false);
                            int reply = JOptionPane.showOptionDialog(null, "Gửi thư thành công!", "Thông báo", 
                                    JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, null, null);
                            if (reply == JOptionPane.OK_OPTION ) {
                                dispose();
                            }
                        }
                        
                    } catch (SQLException ex) {
                        Logger.getLogger(SendEmail.class.getName()).log(Level.SEVERE, null, ex);
                        sendMesseage.setVisible(false);
                    } catch (MessagingException ex) {
                        Logger.getLogger(SendEmail.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            };
            startSend.start();
    }
    
    private boolean checkInput(String touser) {
        //kiểm tra định dạng mail
        if (toUser.equals("")) {
            JOptionPane.showMessageDialog(this, "Người gửi không được để trống", "Thông báo", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        else if (RegexEmail.validation(touser) == false) {
            JOptionPane.showMessageDialog(this, "Email không đúng mẫu: example@domain.com", "Thông báo", JOptionPane.ERROR_MESSAGE);
            return false;
        }        
        else {
            return true;
        }                
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        System.setProperty("illegal-access", "deny");
        LookandFeel.setTheme();

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new SendEmail().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField BccField;
    private javax.swing.JButton attachmentBtn;
    private javax.swing.JTextField ccField;
    public javax.swing.JLabel emailFrom;
    private javax.swing.JButton hintBcc;
    private javax.swing.JButton hintCC;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JEditorPane mailField;
    private javax.swing.JLabel pathAttachment;
    private javax.swing.JButton sendBtn;
    public javax.swing.JTextField subjectField;
    public javax.swing.JTextField toField;
    // End of variables declaration//GEN-END:variables
}
